PS D:\Internship\Zidio Internship> & "d:/Internship/Zidio Internship/zidio/Scripts/python.exe" "d:/Internship/Zidio Internship/Digit Recoginition/model_with_optimizer.py"
2024-11-27 10:04:33.593042: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
2024-11-27 10:04:34.860648: I tensorflow/core/util/port.cc:153] oneDNN custom operations are on. You may see slightly different numerical results due to floating-point round-off errors from different computation orders. To turn them off, set the environment variable `TF_ENABLE_ONEDNN_OPTS=0`.
D:\Internship\Zidio Internship\zidio\Lib\site-packages\keras\src\layers\core\dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
  super().__init__(activity_regularizer=activity_regularizer, **kwargs)
2024-11-27 10:04:37.414344: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
Epoch 1/20
1200/1200 ━━━━━━━━━━━━━━━━━━━━ 4s 2ms/step - accuracy: 0.6340 - loss: 1.1958 - val_accuracy: 0.9274 - val_loss: 0.3383
Epoch 2/20
1200/1200 ━━━━━━━━━━━━━━━━━━━━ 2s 2ms/step - accuracy: 0.8728 - loss: 0.5174 - val_accuracy: 0.9393 - val_loss: 0.2812
Epoch 3/20
1200/1200 ━━━━━━━━━━━━━━━━━━━━ 2s 2ms/step - accuracy: 0.9041 - loss: 0.4141 - val_accuracy: 0.9467 - val_loss: 0.2509
Epoch 4/20
1200/1200 ━━━━━━━━━━━━━━━━━━━━ 2s 2ms/step - accuracy: 0.9146 - loss: 0.3682 - val_accuracy: 0.9517 - val_loss: 0.2381
Epoch 5/20
1200/1200 ━━━━━━━━━━━━━━━━━━━━ 2s 2ms/step - accuracy: 0.9233 - loss: 0.3453 - val_accuracy: 0.9547 - val_loss: 0.2291
Epoch 6/20
1200/1200 ━━━━━━━━━━━━━━━━━━━━ 3s 2ms/step - accuracy: 0.9264 - loss: 0.3329 - val_accuracy: 0.9559 - val_loss: 0.2232
Epoch 7/20
1200/1200 ━━━━━━━━━━━━━━━━━━━━ 2s 2ms/step - accuracy: 0.9295 - loss: 0.3232 - val_accuracy: 0.9587 - val_loss: 0.2176
Epoch 8/20
1200/1200 ━━━━━━━━━━━━━━━━━━━━ 2s 2ms/step - accuracy: 0.9339 - loss: 0.3026 - val_accuracy: 0.9578 - val_loss: 0.2182
Epoch 9/20
1200/1200 ━━━━━━━━━━━━━━━━━━━━ 2s 2ms/step - accuracy: 0.9351 - loss: 0.2953 - val_accuracy: 0.9598 - val_loss: 0.2090
Epoch 10/20
1200/1200 ━━━━━━━━━━━━━━━━━━━━ 3s 2ms/step - accuracy: 0.9365 - loss: 0.2849 - val_accuracy: 0.9565 - val_loss: 0.2211
Epoch 11/20
1200/1200 ━━━━━━━━━━━━━━━━━━━━ 2s 2ms/step - accuracy: 0.9394 - loss: 0.2804 - val_accuracy: 0.9596 - val_loss: 0.2132
Epoch 12/20
1200/1200 ━━━━━━━━━━━━━━━━━━━━ 2s 2ms/step - accuracy: 0.9387 - loss: 0.2829 - val_accuracy: 0.9614 - val_loss: 0.2029
Epoch 13/20
1200/1200 ━━━━━━━━━━━━━━━━━━━━ 2s 2ms/step - accuracy: 0.9406 - loss: 0.2693 - val_accuracy: 0.9551 - val_loss: 0.2238
Epoch 14/20
1200/1200 ━━━━━━━━━━━━━━━━━━━━ 2s 2ms/step - accuracy: 0.9430 - loss: 0.2733 - val_accuracy: 0.9584 - val_loss: 0.2083
Epoch 15/20
1200/1200 ━━━━━━━━━━━━━━━━━━━━ 3s 2ms/step - accuracy: 0.9418 - loss: 0.2689 - val_accuracy: 0.9605 - val_loss: 0.2060
WARNING:absl:You are saving your model as an HDF5 file via `model.save()` or `keras.saving.save_model(model)`. This file format is considered legacy. We recommend using instead the native Keras format, e.g. `model.save('my_model.keras')` or `keras.saving.save_model(model, 'my_model.keras')`.
Model saved successfully.
313/313 ━━━━━━━━━━━━━━━━━━━━ 1s 1ms/step - accuracy: 0.9522 - loss: 0.2297    
Test accuracy: 0.9598